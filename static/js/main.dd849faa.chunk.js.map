{"version":3,"sources":["modules/map.js","modules/imageMap.js","App.js","serviceWorker.js","index.js"],"names":["Map","this","create_blank_map","bind","create_preset_map","map","curr_vis","MAP_SCALE_X","MAP_SCALE_Y","addAreaToMap","getMap","removeAreaFromMap","updateAreaNamesInMap","setImageDimensions","createTextMap","makeTextOnMapVisible","textMap","getTextMap","reDrawMap","scaleMap","name","areas","id","url","shape","coords","fillColor","optional_override","width","height","max_width","screen_scale","new_map","MAP_SCALE","adj_width","Math","min","adj_height","console","log","j","key","coord_transform","x_perc","i","x_new","y_perc","y_new","hide","coordinates","text","push","length","toString","preFillColor","lineWidth","description","imageDimensions","imagePercentage","index","splice","dims","area","includes","parseFloat","d","undefined","x","y","vis","CSSPosition","position","left","top","zIndex","color","fontWeight","visibility","MozUserSelect","WebkitUserSelect","msUserSelect","pointerEvents","style","ImageSelector","props","logStr","MAP","clicked","load","moveOnArea","enterArea","leaveArea","updateWindowDimensions","state","redirect","redirect_path","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","evt","hoveredArea","location","assign","className","onContextMenu","e","preventDefault","src","onLoad","onClick","onMouseEnter","onMouseLeave","onMouseMove","_","strokeColor","idx","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd849faa.chunk.js","sourcesContent":["import React from 'react';\n\n/*\nClass for working with JavaScript object representing\na React-Image-Mapper map. This class is mostly getter and \nsetter methods. \n*/\nclass Map{\n\tconstructor(){\n\t\tthis.create_blank_map = this.create_blank_map.bind(this);\n\t\tthis.create_preset_map = this.create_preset_map.bind(this);\n\t\tthis.map = this.create_preset_map();\n\t\tthis.curr_vis = -1;\n\t\tthis.MAP_SCALE_X = 500;\n\t\tthis.MAP_SCALE_Y = 800;\n\t\tthis.addAreaToMap = this.addAreaToMap.bind(this);\n\t\tthis.getMap = this.getMap.bind(this);\n\t\tthis.removeAreaFromMap = this.removeAreaFromMap.bind(this);\n\t\tthis.updateAreaNamesInMap = this.updateAreaNamesInMap.bind(this);\n\t\tthis.setImageDimensions = this.setImageDimensions.bind(this);\n\t\tthis.createTextMap = this.createTextMap.bind(this);\n\t\tthis.makeTextOnMapVisible = this.makeTextOnMapVisible.bind(this)\n\t\t//textMap stores a list of JSX componenets for text label overlay\n\t\tthis.textMap = [];\n\t\tthis.getTextMap = this.getTextMap.bind(this);\n\t\tthis.reDrawMap = this.reDrawMap.bind(this);\n\t\tthis.scaleMap = this.scaleMap.bind(this);\n\t}\n\n\tcreate_preset_map(){\n\n\t\treturn(\n\t\t{\n\t\t  name: \"my-map\",\n\t\t  areas: [\n\t\t    { id : 1, url : \"content/Recordings.html\", name: \"Recordings\", shape: \"poly\", coords: [32,304,35,488,222,450,223,360,468,349,462,283,117,296],                      fillColor:  \"rgba(81,105,135,.8)\"  , optional_override : [-150,0] },\n\t\t    { id : 2, url : \"content/About.html\", name: \"About\", shape: \"poly\", coords: [299,388,324,393,373,572,240,566,299,476],                                              fillColor:  \"rgba(172,127,91,.8)\"  , optional_override : [-30,30]},\n\t\t    { id : 3, url : \"content/Press.html\", name: \"Press\", shape: \"poly\", coords: [339,422,405,366,469,476,406,557],                                                      fillColor:  \"rgba(228,173,116,.8)\"  , optional_override : [-30,0]},\n\t\t    { id : 4, url : \"content/Book.html\", name: \"Book\", shape: \"poly\", coords: [235,397,282,398,285,472,224,558,95,568,100,506,234,461],                                 fillColor:  \"rgba(132,191,209,.8)\"  , optional_override : [-20,10]},\n\t\t    { id : 5, url : \"content/Concerts.html\", name: \"Concerts\", shape: \"poly\", coords: [29,54,78,94,26,158,70,191,27,269,330,273,470,240,412,192,463,133,323,62,139,53], fillColor: \"rgba(100,123,63,.8)\"  },\n\t\t\t  ]\n\t\t}\n\t)}\n\n\tscaleMap(width,height,max_width,screen_scale){\n\t\tconst multiplier = ((width*screen_scale)/this.MAP_SCALE);\n\t\tlet new_map = this.create_preset_map();\n\t\tconst adj_width  = Math.min((width*screen_scale),max_width);\n\t\tconst adj_height = Math.min((this.MAP_SCALE_Y*((width*screen_scale)/this.MAP_SCALE_X)),(max_width/this.MAP_SCALE_X)*this.MAP_SCALE_Y);\n\t\tconsole.log(adj_width)\n\t\tfor (var i in new_map.areas){\n\t\t\tvar j = 0\n\t\t\tlet key = \"coords\"\n\t\t\tlet coord_transform = () => {\n\t\t\t\tif ((j%2) == 0){\n\t\t\t\t\tconst x_perc = new_map.areas[i][key][j]/this.MAP_SCALE_X\n\t\t\t\t\tconst x_new = adj_width * x_perc\n\t\t\t\t\tnew_map.areas[i][key][j] = x_new\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconst y_perc = new_map.areas[i][key][j]/this.MAP_SCALE_Y\n\t\t\t\t\tconst y_new =  adj_height * y_perc\n\t\t\t\t\tnew_map.areas[i][key][j] = y_new\n\t\t\t\t};\n\t\t\t}\n\t\t\tfor (var j in new_map.areas[i][\"coords\"]){\n\t\t\t\tkey = \"coords\"\n\t\t\t\tcoord_transform(i,j)\n\t\t\t}\n\t\t\tif (\"optional_override\" in new_map.areas[i]){\n\t\t\t\tvar j = 0\n\t\t\t\tfor (var j in new_map.areas[i][\"optional_override\"]){\n\t\t\t\t\tkey = \"optional_override\"\n\t\t\t\t\tcoord_transform(i,j)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(new_map)\n\t\tthis.map = new_map\n\t}\n\n\n\t//returns a blank map\n\tcreate_blank_map(){return(\n\t\t{name: \"my-map\",\n\t\tareas: [\n\t\t\t]\n\t\t}\n\t);}\n\n\tmakeTextOnMapVisible(id, hide = false){\n\t\tif (hide){\n\t\t\tthis.curr_vis = -1\n\t\t\treturn\n\t\t}\n\t\tthis.curr_vis = id\n\t}\n\n\n\t//adds a hotspot/area to the image map\n\taddAreaToMap(coordinates, text = \"\"){\n\t\tcoordinates.push(25)\n\t\t\tthis.map.areas.push(\n\t\t\t\t{\n\t\t\t\t\t\tname: this.map.areas.length.toString(),\n\t\t\t\t\t\tshape: \"circle\",\n\t\t\t\t\t\tcoords: coordinates,\n\t\t\t\t\t\tpreFillColor: \"rgb(255,255,255,0.3)\",\n\t\t\t\t\t\tlineWidth: 2,\n\t\t\t\t\t\tdescription: text,\n\t\t\t\t\t\timageDimensions:[0,0],\n\t\t\t\t\t\timagePercentage:[0.0,0.0]\n\t\t\t\t}\n\t\t\t)\n\t}\n\n\t//removes a hotspot/area from the map\n\tremoveAreaFromMap(index){\n\t\tthis.map.areas.splice(index,1)\n\t\tthis.updateAreaNamesInMap()\n\t}\n\n\n\tsetImageDimensions(dims){\n\n\t\tfor(const area of this.map.areas){\n\t\t\tif (area.imageDimensions.includes(0) === false){\n\t\t\t\tarea.imagePercentage[0] = parseFloat(dims[0]) / parseFloat(area.imageDimensions[0]);\n\t\t\t\tarea.imagePercentage[1] = parseFloat(dims[1]) / parseFloat(area.imageDimensions[1]); \n\t\t\t}\n\t\t\tarea.imageDimensions[0] = dims[0];\n\t\t\tarea.imageDimensions[1] = dims[1];\n\t\t}\n\t}\n\n\t/*\n\tupdates the area.name field. necessary to call when element have\n\tbeen deleted from the map.  \n\t*/\n\tupdateAreaNamesInMap(){\n\t\tlet i = 0;\n\t\tfor(const area of this.map.areas){\n\t\t\tarea.name = i.toString();\n\t\t\ti+=1; \n\t\t}\n\t}\n\tgetMap(){return(this.map)}\n\tgetTextMap(){return(this.textMap)}\n\n\t//This function makes the text map in the this.textMap\n\t//variable. This is used in the render function to create\n\t//the text overlay labels for the cirlces. \n\tcreateTextMap() {\n\t   this.textMap = [];\n\t   this.map.areas.map((d) => {\n\t       if (d.coords !== undefined && d.coords.length !== 0){\n\t\t       let x = 0;\n\t\t       let y = 0;\n\t\t       let i = 0;\n\t\t       for (i = 0; i < d.coords.length; i++) {\n               \t\tif((i%2) === 0){\n               \t\t\tx += d.coords[i];\n               \t\t}\n               \t\telse{\n               \t\t\ty += d.coords[i];\n               \t\t}\n\t\t\t   }\n\t\t\t   x = x/(d.coords.length/2);\n\t\t\t   y = y/(d.coords.length/2);\n\t\t\t   if (d.optional_override != undefined){\n\t\t\t   \t \tx += d.optional_override[0]\n\t\t\t   \t \ty += d.optional_override[1]\n\t\t\t   }\n\n\t\t\t   let vis = \"hidden\"\n\t\t\t   if (d.id == this.curr_vis){\n\t\t\t   \t\tvis = \"visible\"\n\t\t\t   \t}\n\t\t       const CSSPosition = {\n\t\t       \t\tposition : \"absolute\",\n\t\t       \t\tleft : x.toString() + \"px\",\n\t\t       \t\ttop : y.toString() + \"px\",\n\t\t       \t\tzIndex: 10,\n\t\t       \t\tcolor: \"white\",\n\t\t       \t\tfontWeight: 900,\n\t\t       \t\tvisibility: vis,\n\t\t       \t\tMozUserSelect:\"none\",\n\t\t\t\t\tWebkitUserSelect:\"none\",\n\t\t\t\t\tmsUserSelect:\"none\",\n\t\t\t\t\tpointerEvents:\"none\"\n\n\t\t       }\n\t\t       this.textMap.push(<span key={d.name} style={CSSPosition}>{d.name}</span>);\n\t\t\t}\n\t\t\treturn null;\n\t\t})\n\t}\n\n\t/*\n\thandles redrawing points when user changes the image. An image where this is needed\n\tis changing from 1996.8 to 1996.2. This is passed as a callback on statechanges. It\n\tis only called as a call back from set state from within load image. \n\t*/\n\treDrawMap(){\n\t\tfor(const area of this.map.areas){\n\t\t\tif (area.imagePercentage.includes(0) === false){\n\t\t\t\tarea.coords[0] = parseFloat(area.coords[0])*area.imagePercentage[0];\n\t\t\t\tarea.coords[1] = parseFloat(area.coords[1])*area.imagePercentage[1];\n\t\t\t}\n\t\t}\n\t\tthis.createTextMap()\n\t}\n}\n\nexport default Map;","import React, {Component} from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport Map from './map';\nimport { Redirect } from 'react-router';\n\n\n\nclass ImageSelector extends Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.logStr = \" \"\n\t\tthis.MAP = new Map();\n\t\tthis.MAP.createTextMap()\n\t\t//React-image-mapper package functions\n\t\tthis.clicked = this.clicked.bind(this);\n\t\tthis.load = this.load.bind(this);\n\t\tthis.moveOnArea = this.moveOnArea.bind(this);\n\t\tthis.enterArea = this.enterArea.bind(this);\n\t\tthis.leaveArea = this.leaveArea.bind(this);\n\t\tthis.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\t\tthis.state = {\n\t\t\twidth: 0, \n\t\t\theight: 0,\n\t\t\tscreen_scale : .8,\n\t\t\tmax_width : 500,\n\t\t\turl: '/harlanSiteMap.png',\n\t\t\tredirect: false,\n\t\t\tredirect_path : \"\"\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t  this.updateWindowDimensions();\n\t  window.addEventListener('resize', this.updateWindowDimensions);\n\t}\n\n\tcomponentWillUnmount() {\n\t  window.removeEventListener('resize', this.updateWindowDimensions);\n\t}\n\n\tupdateWindowDimensions() {\n\t  this.setState({ width: window.innerWidth, height: window.innerHeight });\n\t  this.MAP.scaleMap(window.innerWidth, window.innerHeight, this.state.max_width, this.state.screen_scale);\n\t}\n\n\n\t//this function handles clicking on a hotspot area\n\tclicked(area,i,evt) {\n\t\tconsole.log(this.state);\n\n\t\tthis.setState({\n\t\t\tredirect_path : area['url'],\n\t\t\tredirect : true\n\t\t});\n\t}\n\n\tload() {\n\t\tthis.setState({})\n\t}\n\n\tenterArea(area) {\n\t\tthis.MAP.makeTextOnMapVisible(area.id)\n\t\tthis.MAP.createTextMap()\n\t\tthis.setState({hoveredArea: area})\n\t}\n\n\tleaveArea(area){\n\t\tthis.MAP.makeTextOnMapVisible(-1, true)\n\t\tthis.MAP.createTextMap()\n\t\tthis.setState({hoveredArea: undefined})\n\n\t}\n\n\tmoveOnArea(area) {\n\t\t//this.MAP.makeTextOnMapVisible(area.id)\n\t\t//this.MAP.createTextMap()\n\t\t//this.setState({hoveredArea: area})\n\t\t\n\t}\n\n\t/*Good dev function but don't need at present*/ \n\t/*\n\tclickedOutside(evt) {\n\t\t//Add new hotspot to map\n\t\t\n\t\tthis.logStr =  this.logStr + ',' + evt.nativeEvent.layerX.toString() + ',' + evt.nativeEvent.layerY.toString()\n\t\tconsole.log(this.logStr)\n\t\tthis.MAP.addAreaToMap([evt.nativeEvent.layerX, evt.nativeEvent.layerY])\n\t\t//create the text map\n\t\tthis.MAP.createTextMap()\n\t\tthis.setState({});\n\t}\n\t*/\n\n\n\n\n\t/*\n\tThis is based off of the react-image-mapper example\n\tapp which can be found at the below two urls:\n\thttps://coldiary.github.io/react-image-mapper/\n\thttps://github.com/coldiary/react-image-mapper\n\t*/\n\trender() {\n\t\tif (this.state.redirect) {\n\t\t\twindow.location.assign(\"https://meadowlarkband.github.io/website/\");\n\t\t\twindow.location.assign(this.state.redirect_path);\n  \t\t}\n\t\treturn (\n\t\t\t<div className=\"grid\"\n\t\t\tonContextMenu={(e)=> e.preventDefault()}>\n\t\t\t\t<div className=\"presenter\">\n\t\t\t\t\t<div id = \"imageMapper\" style={{ position: \"relative\"}}>\n\t\t\t\t\t\t<ImageMapper\t\n\t\t\t\t\t\t\tsrc={'harlanSiteMap.png'}\n\t\t\t\t\t\t\tmap={this.MAP.getMap()}\n\t\t\t\t\t\t\twidth={Math.min((this.state.width * this.state.screen_scale),this.state.max_width)}\n\t\t\t\t\t\t\tonLoad={() => this.load()}\n\t\t\t\t\t\t\tonClick={(area,i,e) => this.clicked(area,i,e)}\n\t\t\t\t\t\t\tonMouseEnter={area => this.enterArea(area)}\n\t\t\t\t\t\t\tonMouseLeave={area => this.leaveArea(area)}\n\t\t\t\t\t\t\tonMouseMove={(area, _, evt) => this.moveOnArea(area, evt)}\n\t\t\t\t\t\t\tlineWidth={4}\n\t\t\t\t\t\t\tstrokeColor={\"white\"}\n\t\t\t\t\t\t></ImageMapper>\n\t\t\t\t\t\t{/* this is where the text map is drawn */}\n\t\t\t\t        {this.MAP.getTextMap().map(function(d, idx){\n\t\t\t\t\t           return (\n\t\t\t\t\t           \td\n\t\t\t\t\t           \t);\n\t\t\t\t       \t })\n\t\t\t\t        }\n\t\t\t        </div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ImageSelector;","import React from 'react';\nimport './App.css';\nimport ImageSelector from './modules/imageMap'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>MEADOWLARKE</h1>\n      <ImageSelector className=\"img-selector\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}